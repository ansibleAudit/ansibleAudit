{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ansibleAudit","text":"<p>ansibleAudit is an open source tool designed to perform automated audits of system configurations using Ansible. This tool uses playbooks to verify configurations according to security best practices. If vulnerabilities or misconfigurations are identified, ansibleAudit provides detailed recommendations and procedures to effectively remediate them. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Automated Audits: Perform comprehensive checks on your system configurations.</li> <li>Security Best Practices: Ensure compliance with industry-standard security guidelines.</li> <li>Detailed Recommendations: Receive actionable advice to address vulnerabilities and misconfigurations.</li> <li>Easy Integration: Integrate seamlessly with existing Ansible workflows.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with ansibleAudit:</p> <ol> <li>Manual Guide: Follow the instructions to install ansibleAudit on your system and learn how to run audits and interpret the results.</li> <li>Contribution Guide: Find out how you can contribute to the development of ansibleAudit.</li> </ol>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you need assistance or have questions, please refer to the following resources:</p> <ul> <li>Community: Join discussions, ask questions, and get involved.</li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>For further inquiries, you can reach us at marcserrano2626@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>ansibleAudit is released under the MIT License.</p> <p>Thank you for using ansibleAudit! We hope it helps you maintain secure and well-configured systems.</p>"},{"location":"contribution_guide/contributing/","title":"Contribution Guide","text":"<p>Thank you for your interest in contributing to our open source vulnerability checker with Ansible! This guide will help you understand how to contribute to the project by adding new vulnerability checks and helping to grow this application. First of all, it should be noted that this application is intended for users who know how to program and have knowledge with Ansible. Our goal is to create a tool that helps users identify potential vulnerabilities in their system configurations without making any changes to the system. In addition, in the event that a vulnerability is detected, information will be provided on how to mitigate it. It should also be noted that this application focuses on checking for vulnerabilities in system configurations.</p> <p>To contribute to the project, it is necessary to clone the \"ansibleAudit\" repository on your local machine. Below are the steps to do this using both the HTTPS URL and the SSH URL.</p>"},{"location":"contribution_guide/contributing/#clone-with-https-url","title":"Clone with HTTPS URL","text":"<p>1.- Open a terminal</p> <p>2.- Run the following command to clone the repository using the HTTPS URL:</p> <pre><code>    git clone https://github.com/ansibleAudit/ansibleAudit.git\n</code></pre>"},{"location":"contribution_guide/contributing/#clone-with-ssh-url","title":"Clone with SSH URL","text":"<p>If you prefer to use an SSH URL to clone the repository, follow these steps:</p> <ol> <li>Generate an SSH key: It is necessary to generate an SSH key if you do not have one. </li> <li>Add SSH key to your Github account</li> <li>Clone the repository</li> </ol> <p>After adding your SSH key to your Github account. Clone the repository using the SSH URL:</p> <pre><code>    git clone git@github.com:ansibleAudit/ansibleAudit.git\n</code></pre>"},{"location":"contribution_guide/contributing/#_1","title":"Contributing Guide","text":"<p>Note:</p> <p>\u2022 Git configuration: Make sure you have your username and email configured in Git before making contributions:</p> <pre><code>    git config \u2013global user.name \u201cyour_username\u201d\n\n    git config \u2013global user.email your_email@example.com\n</code></pre> <p>With these steps, you can clone the repository and start contributing to the project. </p>"},{"location":"contribution_guide/contributing/#_2","title":"Contributing Guide","text":""},{"location":"contribution_guide/contributing/#best-practices-for-naming-branches","title":"Best practices for naming branches","text":"<p>Before following the steps on how you can contribute, it is recommended to follow a series of good practices while naming the branches you will work with. First, it is recommended to use the separators \u201c_\u201d, to improve the readability of the name.</p> <p>Note: It is recommended that the branch name begins with a category name, which indicates the type of work being carried out in the branch. Some of the most used categories are:</p> Category Type Meaning Hotfix To quickly fix critical issues, usually with a temporary solution Bugfix To correct an error Feature To add, remove, or modify a feature Test To experiment with something that is not a problem Wip Work in progress <p>If the following steps are performed it will be easier to identify the task and track its progress:</p>"},{"location":"contribution_guide/contributing/#1-concatenate-the-category-type-with-the-issue-id","title":"1.- Concatenate the category type with the issue ID:","text":"<ul> <li> <p>Select the category to which the task belongs (feature, bugfix, hotfix, etc.).</p> </li> <li> <p>Find the issue ID on GitHub that corresponds to the task.</p> </li> </ul> <p>Note:</p> <p>For example, if you are working on a new feature and the issue ID is 42, you concatenate feature and 42 with an underscore: feature_42.</p>"},{"location":"contribution_guide/contributing/#2-add-a-brief-description-of-the-task","title":"2.- Add a brief description of the task:","text":"<ul> <li> <p>Add a brief description of the task to be performed.</p> </li> <li> <p>This description should be informative but brief, and should be separated by another underscore.</p> </li> </ul> <p>Note:</p> <p>Following the previous example, if the task is to add a new role for CentOS, the branch would be called: feature_42_add_new_role_CentOS.</p>"},{"location":"contribution_guide/contributing/#reason-for-this-convention","title":"Reason for this convention:","text":"<ul> <li>Ease of identification: This naming convention allows anyone viewing the branch to understand what the task is about and what issue it is linked to without needing to delve into the details.</li> <li>Progress Tracking: Facilitates monitoring the progress of each task and its relationship with the issues registered in the problem tracking system.</li> </ul>"},{"location":"contribution_guide/contributing/#_3","title":"Contributing Guide","text":"<p>Tips:</p> <p>\u2022 Avoid using only numbers: It causes confusion and errors</p> <p>\u2022 Avoid long branch names: The branch name must be informative, precise and short. If the names are long they may not be so readable or efficient. </p>"},{"location":"contribution_guide/contributing/#steps-for-contributing","title":"Steps for Contributing","text":"<ol> <li> <p>Find vulnerabilities</p> </li> <li> <p>Create Ansible Playbooks</p> <p>2.1 Create verification playbooks</p> <p>2.2 Create metadata playbooks</p> </li> </ol> <p>3.- Test contributions</p> <p>4.- Create a Pull Request</p> <p>5.- Fork the repository (optional)</p> <p>6.- Future improvements of the application</p> <p>7.- Structure of the project </p>"},{"location":"contribution_guide/create_checking_playbooks/","title":"Checking with Playbook","text":"<p>You must create a playbook that verifies a specific configuration vulnerability. The playbook should only verify the vulnerability, and if found, suggest a possible remedy. If you want to create a playbook for a specific system, it must be done in the directory referring to the type of system, in the directory intended to contribute to the tasks (tasks). </p>"},{"location":"contribution_guide/create_checking_playbooks/#guide-to-create-and-manage-check-playbooks","title":"Guide to Create and Manage Check Playbooks","text":""},{"location":"contribution_guide/create_checking_playbooks/#1-abstract-and-global-design","title":"1. Abstract and Global Design","text":"<p>When creating your playbook, it is crucial to establish a layout that is reusable and easy to manage. Follow these key points:</p>"},{"location":"contribution_guide/create_checking_playbooks/#global-variables","title":"Global Variables","text":"<p>Global variables allow configurations to be easily modified and adapted. These variables are defined in the <code>vars</code> directory of the common role (<code>common</code>). Some useful global variables could be:</p> <ul> <li>Common Package Names: Defines once common package names to be used across multiple playbooks.</li> <li>Common Commands: Commands that can be used in various playbooks.</li> <li>Common Paths: Common file paths and directories for different playbooks.</li> <li>Common Remedies: General solutions for common vulnerabilities.</li> <li>Configuration Parameters: General settings that may vary depending on the system.</li> </ul>"},{"location":"contribution_guide/create_checking_playbooks/#reusable-tasks","title":"Reusable Tasks","text":"<ul> <li>Creation of Generic Tasks: Tasks should be as generic as possible to facilitate their reuse in multiple playbooks.</li> <li>Minimal Modifications: Design the tasks and variables so that they require the minimum of modifications to adapt to different systems.</li> </ul>"},{"location":"contribution_guide/create_checking_playbooks/#2-creation-of-the-playbook","title":"2. Creation of the Playbook","text":"<p>When creating your playbook, be sure to follow these steps:</p> <ul> <li>Vulnerability Check: The playbook must check for the presence of vulnerabilities in specific system configurations. Do not perform automatic changes on the system apart from this check.</li> <li>Remediation Suggestions: If a vulnerability is detected, the playbook should provide suggestions on how to fix it, without applying the solutions automatically.</li> </ul>"},{"location":"contribution_guide/create_checking_playbooks/#3-structure-of-the-playbooks","title":"3. Structure of the Playbooks","text":"<ul> <li>Specific Directory by System Type: Places the playbook in the directory corresponding to the type of system it verifies. This makes it easier to organize and access specific playbooks for each system.</li> <li>Tasques: Locate the tasks in the directory designed for tasks (<code>tasks</code>).</li> </ul>"},{"location":"contribution_guide/create_checking_playbooks/#4-new-type-of-system","title":"4. New Type of System","text":"<p>If you want to contribute playbooks for a system that does not have a dedicated directory, follow these steps:</p>"},{"location":"contribution_guide/create_checking_playbooks/#open-an-issue","title":"Open an Issue","text":"<ul> <li>Report the Need: Open an issue in the project management platform (such as GitHub) to report the need to create a directory for this new type of system. Include details about the system and the type of playbooks you want to add.</li> </ul>"},{"location":"contribution_guide/create_checking_playbooks/#create-a-new-role","title":"Create a New Role","text":"<ul> <li>Role Name: The role name must match the name of the operating system distribution, as provided by <code>distro.name()</code>.</li> <li>Command: Use the following command to create a new role for this system:<pre><code>ansible-galaxy init roles/sysname\n</code></pre> </li> </ul> <p>Note Replace system_name with the specific name of the operating system or system type you are adding.</p>"},{"location":"contribution_guide/create_checking_playbooks/#_1","title":"Create verification playbooks","text":"<p>This guide should help users clearly understand how to create and manage playbooks that checks the configurations's system in search of vulnerabilities, as well as contribute to include new types of systems to be tracted.</p>"},{"location":"contribution_guide/create_checking_playbooks/#additional-notes","title":"Additional notes","text":"<ul> <li>Style Consistency: Make sure to use a consistent style for headings and lists to maintain clarity.</li> <li>Clear Details: Provides clear and detailed instructions so that users can follow the steps without confusion.</li> </ul>"},{"location":"contribution_guide/create_metadata_playbooks/","title":"Metadata Playbook","text":"<p>A Metadata Playbook provides additional information about the vulnerabilities verified by the playbook, including supported systems and versions, as well as details about the vulnerability. Here's how to create and structure this metadata file:</p>"},{"location":"contribution_guide/create_metadata_playbooks/#creation-of-the-metadata-file","title":"Creation of the Metadata File","text":""},{"location":"contribution_guide/create_metadata_playbooks/#file-name","title":"File name","text":"<ul> <li>YAML file: Create a YAML file that contains the metadata related to the playbook you have created. The file name must be the same as the playbook, but must end with <code>_metadata.yml</code>. For example, if your playbook is called <code>check_security.yml</code>, the metadata file should be called <code>check_security_metadata.yml</code>.</li> </ul>"},{"location":"contribution_guide/create_metadata_playbooks/#metadata-file-contents","title":"Metadata File Contents","text":"<p>The <code>metadata.yml</code> file must include the following information:</p> <ul> <li> <p>Compatible Systems and Versions: Specifies the operating systems and versions that are compatible with the verification carried out by the playbook. If there are multiple systems or versions, list them in as much detail as possible. If you discover that a system or version is missing, other collaborators can add them later.</p> </li> <li> <p>Description: Provides a detailed description of the vulnerability that the playbook checks for. You can obtain this information directly from relevant databases or benchmarks. If the description is long, you can summarize it for clarity.</p> </li> <li> <p>Justification (Rationale): Explains why the vulnerability represents a risk to the system. This justification can also be obtained from databases or benchmarks. If it is not available, you will need to create one manually that clearly describes the associated risk.</p> </li> <li> <p>Vulnerability Score: Includes the vulnerability score based on the CVE (Common Vulnerabilities and Exposures) calculator. This score helps evaluate the severity of the vulnerability found and its potential impact on the system.</p> </li> </ul>"},{"location":"contribution_guide/create_metadata_playbooks/#additional-considerations","title":"Additional considerations","text":"<ul> <li> <p>Information Gathering: Use reliable sources such as vulnerability databases and benchmarks to obtain the description and justification. Make sure the information is accurate and relevant.</p> </li> <li> <p>Summary of Extensive Information: If the information is very extensive, make a summary that maintains the most important aspects without losing clarity.</p> </li> <li> <p>Continuous Update: Make sure to keep the metadata updated as new vulnerabilities are discovered or supported system versions are updated.</p> </li> </ul>"},{"location":"contribution_guide/create_pull_request/","title":"Create a pull request","text":"<p>After testing your playbooks, follow these steps to submit your contribution:</p> <ol> <li> <p>Add changes: Prepare your changes:</p> <pre><code>git add.\n</code></pre> </li> <li> <p>Commit the changes: Commit your changes with a meaningful message that briefly explains the work done.</p> <pre><code>git commit -m \u201cShort and precise description of what you did\u201d\n</code></pre> </li> <li> <p>Send changes: Send the changes to the repository</p> <pre><code>git push origin &lt;branch_name&gt;\n</code></pre> </li> <li> <p>Create PR: Open the pull request in the main repository</p> </li> </ol>"},{"location":"contribution_guide/create_pull_request/#pull-request","title":"Pull Request:","text":"<p>When you open the pull request, there is a template that needs to be filled out:</p> <p></p>"},{"location":"contribution_guide/find_vulnerabilities/","title":"Find vulnerabilities","text":"<p>Vulnerability finding is the process of identifying and documenting security weaknesses in computer systems that could be exploited by attackers. This process is crucial to ensure the security and integrity of the systems. Before contributing, it is important to identify existing vulnerabilities. This can be accomplished using reliable vulnerability databases and benchmarks. Here it provide a brief explanation of three important and reliable sources:</p>"},{"location":"contribution_guide/find_vulnerabilities/#cve-common-vulnerabilities-and-exposures","title":"CVE (Common Vulnerabilities and Exposures)","text":"<p>It is a public cataloging system that identifies and lists known security vulnerabilities in software and hardware products. This CVE system is maintained and developed by MITER together with the cybersecurity community. - CVE Details</p>"},{"location":"contribution_guide/find_vulnerabilities/#nist-national-institute-of-standards-and-technology","title":"NIST (National Institute of Standards and Technology)","text":"<p>An United States government agency that provides standards and guidelines to improve information security. It also provides detailed resources for assessing and managing security risks. - NIST National Vulnerability Database (NVD)</p>"},{"location":"contribution_guide/find_vulnerabilities/#cis-center-for-internet-security-benchmarks","title":"CIS (Center for Internet Security) Benchmarks","text":"<p>CIS Benchmarks are a set of recommended practices developed by security experts to improve the security of computer systems. This system provides best practices in system configurations to reduce the risk of vulnerabilities. CIS benchmarks are used to ensure that systems are configured following security best practices. - CIS Benchmarks</p>"},{"location":"contribution_guide/find_vulnerabilities/#importance-of-using-these-sources","title":"Importance of using these sources:","text":"<ul> <li>Precision and reliability: Databases such as CVE, NIST and the CIS benchmarks with reliable and globally recognized sources.</li> <li>Constant update: These sources are constantly updated with the latest vulnerabilities and security practices.</li> <li>Standardized reference: They offer standards that allow organizations and security professionals to work with a common language and consistent measures.</li> </ul>"},{"location":"contribution_guide/scores/","title":"Vulnerability Scores","text":"<ol> <li> <p>CVE Score: If the vulnerability being evaluated already has a CVE score, use this score directly in the metadata.yml file </p> </li> <li> <p>CVSS calculator: If the score is not available, you must calculate it using the CVE CVSS calculator. This tool will help you determine the vulnerability score based on various impact and exploitability parameters.</p> <p>To facilitate this process, diagrams have been created that explain which parameters and options you must choose in each case. These diagrams will guide you through the different possible scenarios, ensuring that the calculated score is accurate and consistent with CVSS standards. Then the basic flow:</p> </li> <li> <p>Access CVE's CVSS calculator version 4.0 (most current): CVSS Calculator</p> </li> <li> <p>Select the relevant parameters: Follow the diagrams provided to choose the correct parameters and options for each type of vulnerability.</p> </li> <li>Get the score: Enter the parameters in the calculator and use the score generated in the metadata.yml file</li> </ol> <p>Users should use the base score of the vulnerability if available. If not available, users must fill in the base metrics to calculate the score.</p> <p>Diagrams:</p> <p>These diagrams are designed to make the calculation process as clear and straightforward as possible.</p>"},{"location":"contribution_guide/scores/#_1","title":"Scores","text":"<p>Attack Vector (AV)</p> <p></p>"},{"location":"contribution_guide/scores/#_2","title":"Scores","text":"<p>Attack complexity (AC)</p> <p></p>"},{"location":"contribution_guide/scores/#_3","title":"Scores","text":"<p>Attack Requirements (AR)</p> <p></p>"},{"location":"contribution_guide/scores/#_4","title":"Scores","text":"<p>Privileges Required (PR)</p> <p></p>"},{"location":"contribution_guide/scores/#_5","title":"Scores","text":"<p>User interaction (UI)</p> <p></p>"},{"location":"contribution_guide/scores/#_6","title":"Scores","text":"<p>Confidentiality (VC), Integrity (VI), Availability (VA)</p> <p></p>"},{"location":"contribution_guide/scores/#_7","title":"Scores","text":"<p>Confidentiality (SC), Integrity (SI), Availability (SA)</p> <p></p>"},{"location":"contribution_guide/scores/#_8","title":"Scores","text":"<p>Safety (S)</p> <p></p>"},{"location":"contribution_guide/scores/#_9","title":"Scores","text":"<p>Automatable (AU)</p> <p></p>"},{"location":"contribution_guide/scores/#_10","title":"Scores","text":"<p>Recovery (R)</p> <p></p>"},{"location":"contribution_guide/scores/#_11","title":"Scores","text":"<p>Value Density (V)</p> <p></p>"},{"location":"contribution_guide/scores/#_12","title":"Scores","text":"<p>Vulnerability Response Effort (RE)</p> <p></p>"},{"location":"contribution_guide/scores/#_13","title":"Scores","text":"<p>Provider Urgency (U)</p> <p></p>"},{"location":"contribution_guide/scores/#_14","title":"Scores","text":"<p>Confidentiality Requirements (CR), Integrity Requirements (IR), Availability Requirements (AR)</p> <p></p>"},{"location":"contribution_guide/test_playbooks/","title":"Test your contributions:","text":"<p>Once the playbooks have been created, you must perform the following tests:</p> <ol> <li> <p>Verify Syntax and Format: Ensured that your playbooks comply with Ansible's syntax and style guidelines.</p> <pre><code>ansible-lint &lt;playbook_name&gt;.yml\n</code></pre> </li> <li> <p>Execution in test mode: Test the playbooks using Ansible's --check mode to make sure they work as expected without making changes to the system.</p> </li> </ol>"},{"location":"user_manual/installation_win/","title":"Installation Manual for Windows","text":"<p>This section explains the installation manual for Windows, providing detailed instructions for properly configuring the system.</p>"},{"location":"user_manual/installation_win/#step-1-install-wsl","title":"Step 1: Install WSL","text":"<ol> <li>Open PowerShell as Administrator: Right-click on the Start menu and select \"Windows PowerShell (Administrator)\".</li> <li> <p>Enable WSL: In the PowerShell window, execute the following command:</p> <p><code>powershell Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></p> </li> <li> <p>Restart the computer: Once the installation is complete, it's necessary to restart the computer to apply the changes.</p> </li> </ol>"},{"location":"user_manual/installation_win/#step-2-install-ubuntu-2204-lts","title":"Step 2: Install Ubuntu 22.04 LTS","text":"<ol> <li>Open Microsoft Store: Open Microsoft Store from the Start menu.</li> <li> <p>Search and install Ubuntu 22.04:</p> <ul> <li>In the search bar of Microsoft Store, type Ubuntu 22.04 LTS and press Enter.</li> <li>Select Ubuntu 22.04 LTS from the search results.</li> <li>Click Get or Install to download and install the distribution (sign-in to the store is not required for this installation).</li> </ul> </li> <li> <p>Launch Ubuntu 22.04: Once the installation is complete, open Ubuntu 22.04 from the Start menu.</p> </li> <li>Configure Ubuntu 22.04: Upon starting Ubuntu for the first time, you will be asked to create a username and password. This will create a local user account.</li> <li> <p>Update Ubuntu software packages: Once logged into Ubuntu, open the terminal (if it doesn't open automatically) and run the following command to update all software packages:</p> <p><code>bash sudo apt update &amp;&amp; sudo apt upgrade -y</code></p> <p>This command will update the list of available packages and upgrade all installed packages to the latest versions.</p> </li> </ol>"},{"location":"user_manual/installation_win/#step-3-create-a-user-and-add-to-the-administrators-group-using-powershell","title":"Step 3: Create a User and Add to the Administrators Group Using PowerShell","text":"<ol> <li> <p>Open PowerShell as Administrator: To begin, open PowerShell with administrator privileges. Right-click on the Windows Start button and select \"Windows PowerShell (Administrator)\" or \"PowerShell (Administrator)\". This ensures you have the necessary permissions to make changes to the system.</p> </li> <li> <p>Create a New User: Next, create a new user named \"ansible\". Use the following command to create the user with a specific password and set the password to never expire:</p> <p><code>powershell New-LocalUser -Name \"ansible\" -FullName \"ansible\" -Description \"ansible user\" -Password (ConvertTo-SecureString \"SuperSecurePassword123@\" -AsPlainText -Force) -PasswordNeverExpires</code></p> </li> <li> <p>Add the User to the Administrators Group: To add the \"ansible\" user to the Administrators group, first list the local groups to confirm the exact name of the Administrators group:</p> <p><code>powershell Get-LocalGroup</code></p> <p>This command will display all local groups on the system, including the name and description of each group. Look for the group corresponding to administrators, which is typically \"Administrators\". Once confirmed, add the \"ansible\" user to the Administrators group with the following command:</p> <p><code>powershell Add-LocalGroupMember -Group \"Administrators\" -Member \"ansible\"</code></p> </li> </ol>"},{"location":"user_manual/installation_win/#step-4-verify-powershell-and-net","title":"Step 4: Verify PowerShell and .NET","text":"<ol> <li> <p>Verify PowerShell Version: To ensure that the PowerShell version is appropriate, use the following command:</p> <p><code>powershell Get-Host | Select-Object Version</code></p> <p>This command will display the current version of PowerShell installed on the system. Verify this version, as WinRM requires a specific version of PowerShell for proper compatibility and operation.</p> </li> <li> <p>Verify .NET Version: To check the version of the .NET framework installed, use the following command:</p> <p><code>powershell Get-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -Recurse | Get-ItemProperty -Name version -EA 0 | Where { $_.PSChildName -Match '^(?!S)\\p{L}' } | Select PSChildName, version</code></p> <p>This command accesses the Windows registry to retrieve information about the installed .NET framework versions.</p> </li> <li> <p>Verify WinRM is Not Configured: To confirm if WinRM (Windows Remote Management) is configured on the system, use the following command:</p> <p><code>powershell winrm get winrm/config/Service</code></p> </li> </ol>"},{"location":"user_manual/installation_win/#step-5-configure-winrm","title":"Step 5: Configure WinRM","text":"<p>To prepare WinRM (Windows Remote Management) to accept remote connections, follow these specific steps in PowerShell. These steps configure the service to allow connections through WinRM, which is necessary for remote management and automation with tools like Ansible.</p> <ol> <li> <p>Open PowerShell as Administrator: To begin, open PowerShell with administrator privileges. Right-click on the Windows Start button and select \"Windows PowerShell (Administrator)\" or \"PowerShell (Administrator)\".</p> </li> <li> <p>Configure WinRM: Execute the following commands in PowerShell:</p> <p>(a) Initialize Basic WinRM Configuration:</p> <pre><code>```powershell\nwinrm quickconfig\n```\n</code></pre> <p>This command initializes the basic configuration of WinRM. If WinRM is not enabled, this command configures it to accept connections and sets the default configurations.</p> <p>(b) Allow Basic Authentication:</p> <pre><code>```powershell\nwinrm set winrm/config/service/auth '@{Basic=\"true\"}'\n```\n</code></pre> <p>Basic authentication allows credentials to be transmitted in plain text. This option can be useful for testing environments but is not recommended for production environments without proper encryption.</p> <p>(c) Allow Unencrypted Connections:</p> <pre><code>```powershell\nwinrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\n```\n</code></pre> <p>This allows unencrypted connections, which can be a vulnerability in production environments. In such cases, it is advisable to use Kerberos for more robust security. Using Kerberos requires additional configuration, including domain configuration, ticket generation for authentication, configuring WinRM to use Kerberos, and managing keys and security policies.</p> </li> </ol>"},{"location":"user_manual/installation_win/#step-6-download-and-run-the-script-to-configure-winrm-for-ansible","title":"Step 6: Download and Run the Script to Configure WinRM for Ansible","text":"<p>To complete the WinRM configuration for use with Ansible, follow these additional steps:</p> <ol> <li> <p>Ensure PowerShell Uses TLS 1.2: To ensure secure connections with Ansible, make sure PowerShell uses TLS 1.2. Execute the following command in PowerShell:</p> <p><code>powershell [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</code></p> </li> <li> <p>Download the Configuration Script: Download the script provided by Ansible that configures WinRM for use with Ansible. Use the following commands to download and execute the script:</p> <p><code>powershell $url = \"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\" $file = \"$env:temp\\ConfigureRemotingForAnsible.ps1\" (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)</code></p> </li> <li> <p>Run the Configuration Script: Once the script is downloaded, the final step is to execute it to configure WinRM. Use the following command to run the script with the appropriate options:</p> <p><code>powershell powershell.exe -ExecutionPolicy ByPass -File $file</code></p> <p>The <code>-ExecutionPolicy ByPass</code> option allows the script to run without the usual PowerShell execution policy restrictions, ensuring that the script can execute correctly.</p> </li> </ol>"},{"location":"user_manual/installation_win/#verify-winrm-configuration","title":"Verify WinRM Configuration","text":"<p>To ensure that WinRM (Windows Remote Management) is configured correctly on a system, it is important to check various aspects of its configuration.</p> <ol> <li> <p>Verify Current WinRM Configuration: Use the following command to get detailed information about the current WinRM service configuration. This includes aspects such as authentication, encryption, and connection options:</p> <p><code>powershell winrm get winrm/config/Service</code></p> </li> <li> <p>Verify Windows Remote Shell (WinRS) Configuration: This command provides information about the configuration of WinRS, the component that allows remote command execution. Check the timeouts and remote execution options:</p> <p><code>powershell winrm get winrm/config/Winrs</code></p> </li> <li> <p>Verify Configured WinRM Listeners: Use the following command to show the listeners configured for WinRM, and ensure they are correctly configured with the expected ports and protocols:</p> <p><code>powershell winrm enumerate winrm/config/Listener</code></p> </li> </ol>"},{"location":"user_manual/installation_win/#inventory-file","title":"Inventory File","text":"<p>To run Ansible on Windows from a Windows Subsystem for Linux (WSL) environment on Ubuntu, you first need to configure an inventory file. Begin by creating a file named <code>inventory</code> in the directory where you work with Ansible. This file specifies the necessary information to connect to the Windows machines.</p> <p>Inside this file, define a group of machines named <code>windows</code>, and in this case, add a machine named <code>windows10</code> with the IP address <code>X.X.X.X</code>. This IP address corresponds to the Windows machine where Ansible will be executed.</p> <p>The inventory file contains a section of variables for the <code>windows</code> group, configuring crucial details for the connection. These variables include:</p> <ol> <li> <p>ansible_user and ansible_password: Specifies the username and password required to authenticate to the Windows machine. This allows Ansible to perform remote operations with the appropriate access rights.</p> <p><code>ini ansible_user: username ansible_password: password</code></p> </li> <li> <p>ansible_port: Defines the port used for the WinRM connection. The default port for secure WinRM is 5986.</p> <p><code>ini ansible_port: 5986</code></p> </li> <li> <p>ansible_connection: Specifies the type of connection. For WinRM, it is set to <code>winrm</code>.</p> <p><code>ini ansible_connection: winrm</code></p> </li> <li> <p>ansible_winrm_transport: Configures the transport method for the WinRM connection. In this case, it is set to <code>basic</code>, which uses basic authentication.</p> <p><code>ini ansible_winrm_transport: basic</code></p> </li> <li> <p>ansible_winrm_server_cert_validation: Defines server certificate validation. In this case, it is set to <code>ignore</code> to disable server certificate validation.</p> <p><code>ini ansible_winrm_server_cert_validation: ignore</code></p> </li> </ol>"},{"location":"user_manual/installation_win/#win_pingyml-file","title":"win_ping.yml File","text":"<p>To verify that Ansible can run correctly on Windows machines from the WSL environment on Ubuntu, create and run a test playbook. This playbook will help confirm that the configuration of your inventory file is correct and that Ansible can communicate with the Windows machines as expected.</p> <p>First, create a file named <code>win_ping.yml</code>. This file is an Ansible playbook that contains instructions for Ansible to execute on the machines defined in the inventory file. The content of the <code>win_ping.yml</code> file is as follows:</p> <pre><code>---\n- name: win_ping module demo\n  hosts: windows\n  become: false\n  gather_facts: false\n  tasks:\n    - name: test connection\n      ansible.windows.win_ping:\n</code></pre>"},{"location":"user_manual/installation_win/#run-the-playbook","title":"Run the Playbook","text":"<p>To verify that Ansible can communicate correctly with the Windows machines, execute the <code>win_ping.yml</code> playbook using the appropriate command. Run the following command in the WSL environment on Ubuntu:</p> <pre><code>ansible-playbook -i inventory win_ping.yml\n</code></pre>"},{"location":"user_manual/reports_and_dashboards/","title":"Types of Graphics","text":"<ol> <li> <p>Playbook Stats Chart</p> <p>This graph uses a cheese-cake graph to represent the distribution of playbooks with OK and FAILED results. Each section of the page shows the proportion of playbooks that have successfully detected vulnerabilities (OK) compared to those that have detected vulnerabilities (FAILED).</p> </li> </ol> <p></p> <ol> <li> <p>Graph of Vulnerabilities by Severity</p> <p>This graph uses a column graph to show the name of vulnerabilities found according to the severity data. The columns represent different severity levels: None, Low, Medium, High, Critical, allowing you to visualize how many vulnerabilities fall into each category.</p> </li> </ol> <p> </p>"},{"location":"user_manual/reports_and_dashboards/#recommended-actions","title":"Recommended Actions","text":"<ul> <li>Review and Analysis</li> </ul> <ul> <li>Users must carefully review the results of the playbooks to understand the vulnerabilities detected and the recommended steps to mitigate them.</li> <li>This review includes reading the generated reports in PDF and HTML formats to obtain a complete view of the system's security status.</li> </ul> <ul> <li>Implementation of Remediations</li> </ul> <ul> <li>Follow the suggestions provided to correct vulnerable configurations.</li> <li>Ensures the implementation of the recommended corrective measures for each vulnerability detected to minimize the risk.</li> </ul> <ul> <li>Analyze Generated Reports</li> </ul> <ul> <li>Read the description of each vulnerability, the rationale and the score provided to understand the associated risk.</li> <li>The reports provide detailed information that helps make informed decisions about necessary corrective actions.</li> </ul> <ul> <li>Review of the Graphics</li> </ul> <ul> <li>Regularly monitor the generated graphics in the \u201cdashboards\u201d directory.</li> <li>Graphic displays help identify trends and areas of concern in system security, allowing for proactive response.</li> </ul>"},{"location":"user_manual/reports_and_dashboards/#acknowledgements","title":"Acknowledgements","text":"<p>Thank you for serving and trusting our project! We value your support and hope that this application continues to be of great help. If you have any questions, comments, suggestions or suggestions, do not hesitate to contact us.</p>"},{"location":"user_manual/results/","title":"Results analysis","text":""},{"location":"user_manual/results/#results-by-console","title":"Results by Console","text":"<p>When it runs a playbook, results will be displayed in the console indicating the status of the security checks:</p> <ul> <li>OK: Indicates that the playbook has not detected any vulnerability in the system.</li> <li>FAILED: Indicates that a vulnerability has been detected in the system. The application will show possible remedies to mitigate the vulnerability. This way, users can proactively take corrective actions to strengthen system security.</li> </ul>"},{"location":"user_manual/results/#generated-reports","title":"Generated Reports","text":"<p>In addition to console results, the application generates detailed reports in PDF and HTML formats. These reports are stored in the reports directory and contain the following elements:</p> <ul> <li>Playbook Name: Identification of the specific playbook that has been executed.</li> <li>Obtained Date/Time, System Type and Version: Timestamp indicating when the results were obtained, along with the system type and its version.</li> <li>Status: Can be OK or FAILED, depending on whether vulnerabilities were detected or not.</li> <li>Severity Score: Level of severity of the vulnerability found, classified as: None, Low, Medium, High, Critical.</li> <li>Description: Details about the specific configuration being verified.</li> <li>Rationale: Explanation or justification of why the vulnerability represents a risk to the system.</li> <li>Remediation: Detailed instructions on how to mitigate the detected vulnerability.</li> </ul>"},{"location":"user_manual/user_manual/","title":"User manual","text":"<p>This manual is designed for users who want to use the application to verify vulnerabilities in their system configurations. If you are interested in contributing to the development of the application, please consult the Create a Pull Request.</p>"},{"location":"user_manual/user_manual/#prerequisites","title":"Prerequisites:","text":"<ul> <li> <p>Python 3.10 installed on the system</p> </li> <li> <p>Git installed</p> </li> <li> <p>Pip installed</p> </li> </ul>"},{"location":"user_manual/user_manual/#1-steps-for-installing-the-app","title":"1. Steps for installing the app:","text":"<ol> <li> <p>Go to the Github repository</p> </li> <li> <p>Download the .zip file of the code by clicking on the \"Code\" button and then on \"Download ZIP\".</p> </li> <li> <p>Unzip the .zip file</p> </li> </ol>"},{"location":"user_manual/user_manual/#2-create-and-activate-a-virtual-environment","title":"2. Create and activate a virtual environment","text":"<ol> <li> <p>Open a terminal and navigate to the directory where the code has been unzipped</p> </li> <li> <p>Create a virtual environment by executing the following command:     </p> <pre><code>python -m venv .\n</code></pre> </li> <li> <p>Activate the virtual environment</p> <pre><code>source ./bin/activate\n</code></pre> </li> </ol>"},{"location":"user_manual/user_manual/#3-install-dependencies","title":"3. Install dependencies","text":"<p>Once the virtual environment is activated, run the setup.sh file that will install all the necessary packages:</p> <pre><code>    ./setup.sh\n</code></pre> <p>Note: Make sure the setup.sh file has execute permissions. If not, grant it permissions by running:</p> <pre><code>    chmod +x install setup.sh\n</code></pre>"},{"location":"user_manual/user_manual/#4-run-the-application","title":"4. Run the application","text":"<p>With all dependencies installed, run the application with the following command:</p> <pre><code>    python run.py\n</code></pre> <p>The application will start running and perform a check of rules compatible with the user's system and version to identify possible vulnerabilities in the configurations. Running the application from the terminal console will display important information about the playbooks that are running and their status. This tool is designed to provide real-time feedback on systems configuration and potential vulnerabilities detected. During execution, the application will display the names of the playbooks that are being executed to indicate which tasks are currently being performed.</p>"}]}